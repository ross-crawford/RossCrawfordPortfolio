{"version":3,"sources":["components/Home.js","components/Projects.js","components/About.js","components/Contact.js","components/Background.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","href","target","rel","icon","faGithubSquare","size","faLinkedin","faFacebookSquare","faInstagramSquare","Projects","About","Contact","action","method","type","placeholder","value","Background","App","to","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAwDeA,EA/CF,WACX,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,SAAd,iBACA,wBAAIA,UAAU,YAAd,iBACA,yBAAKA,UAAU,SACb,uBACEC,KAAK,mCACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,QAEV,kBAAC,IAAD,CAAiBI,KAAMC,IAAgBC,KAAK,KAAKN,UAAU,UAE7D,uBACEC,KAAK,kDACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,QAEV,kBAAC,IAAD,CAAiBI,KAAMG,IAAYD,KAAK,KAAKN,UAAU,UAEzD,uBACEC,KAAK,4CACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,QAEV,kBAAC,IAAD,CAAiBI,KAAMI,IAAkBF,KAAK,KAAKN,UAAU,UAE/D,uBACEC,KAAK,sCACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,QAEV,kBAAC,IAAD,CACEI,KAAMK,IACNH,KAAK,KACLN,UAAU,aCtCPU,EARE,WACf,OACE,yBAAKV,UAAU,qBACb,0CC4BSW,EA/BD,WACZ,OACE,yBAAKX,UAAU,SACb,wBAAIA,UAAU,SAAd,aACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,eAAf,uJAGQ,6BAHR,+BAMA,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,oCACA,yCACA,sCACA,uCACA,4CAEF,yBAAKA,UAAU,SACb,wCACA,oCACA,yCACA,kCACA,oDCTKY,EAfC,WACd,OACE,yBAAKZ,UAAU,WACb,wBAAIA,UAAU,SAAd,gBACA,yBAAKA,UAAU,YACf,0BAAMA,UAAU,eAAea,OAAO,GAAGC,OAAO,IAC9C,2BAAOC,KAAK,OAAOf,UAAU,YAAYgB,YAAY,SACrD,2BAAOD,KAAK,QAAQf,UAAU,YAAYgB,YAAY,UACtD,8BAAUhB,UAAU,YAAYgB,YAAY,YAC5C,2BAAOD,KAAK,SAASf,UAAU,cAAciB,MAAM,YCM5CC,EAfI,WACjB,OACE,yBAAKlB,UAAU,eACb,wBAAIA,UAAU,SACZ,6BACA,6BACA,6BACA,6BACA,6BACA,gCCsDOmB,EAzDH,WACV,OACE,6BACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,KACE,4BACE,4BACE,kBAAC,IAAD,CAAMoB,GAAIC,0BAA8BrB,UAAU,YAAlD,SAIF,4BACE,kBAAC,IAAD,CACEoB,GAAIC,kCACJrB,UAAU,YAFZ,aAOF,4BACE,kBAAC,IAAD,CAAMoB,GAAIC,+BAAmCrB,UAAU,YAAvD,UAIF,4BACE,kBAAC,IAAD,CACEoB,GAAIC,iCACJrB,UAAU,YAFZ,aASJ,yBAAKA,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAMF,2BACjB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMF,mCACjB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOE,KAAMF,gCACX,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOE,KAAMF,kCACX,kBAAC,EAAD,WAMV,kBAAC,EAAD,QChDcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c915a8d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faGithubSquare,\r\n  faFacebookSquare,\r\n  faLinkedin,\r\n  faInstagramSquare,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <h1 className=\"title\">Ross Crawford</h1>\r\n      <h2 className=\"subtitle\">Web Developer</h2>\r\n      <div className=\"links\">\r\n        <a\r\n          href=\"https://github.com/ross-crawford\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"link\"\r\n        >\r\n          <FontAwesomeIcon icon={faGithubSquare} size=\"3x\" className=\"icon\" />\r\n        </a>\r\n        <a\r\n          href=\"https://www.linkedin.com/in/rosscrawfordwebdev/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"link\"\r\n        >\r\n          <FontAwesomeIcon icon={faLinkedin} size=\"3x\" className=\"icon\" />\r\n        </a>\r\n        <a\r\n          href=\"https://www.facebook.com/ross.crawford.77\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"link\"\r\n        >\r\n          <FontAwesomeIcon icon={faFacebookSquare} size=\"3x\" className=\"icon\" />\r\n        </a>\r\n        <a\r\n          href=\"https://www.instagram.com/rawsslol/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"link\"\r\n        >\r\n          <FontAwesomeIcon\r\n            icon={faInstagramSquare}\r\n            size=\"3x\"\r\n            className=\"icon\"\r\n          />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Projects = () => {\r\n  return (\r\n    <div className=\"content-container\">\r\n      <h1>Projects</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"about\">\r\n      <h1 className=\"title\">What I do</h1>\r\n      <div className=\"divider\"></div>\r\n      <div className=\"description\">\r\n        Hi, I'm Ross, a front-end Web Developer and Designer based in Glasgow. I\r\n        create responsive websites and deliver amazing user experiences from\r\n        code. <br />\r\n        Here's some of my skills...\r\n      </div>\r\n      <div className=\"skills\">\r\n        <div className=\"left\">\r\n          <p>HTML5</p>\r\n          <p>JavaScript</p>\r\n          <p>Node.js</p>\r\n          <p>Firebase</p>\r\n          <p>UI/UX Design</p>\r\n        </div>\r\n        <div className=\"right\">\r\n          <p>CSS3/SASS</p>\r\n          <p>React</p>\r\n          <p>Express.js</p>\r\n          <p>Git</p>\r\n          <p>Responsive Design</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div className=\"contact\">\r\n      <h1 className=\"title\">Get in touch</h1>\r\n      <div className=\"divider\"></div>\r\n      <form className=\"contact-form\" action=\"\" method=\"\">\r\n        <input type=\"text\" className=\"form-text\" placeholder=\"Name\" />\r\n        <input type=\"email\" className=\"form-text\" placeholder=\"Email\" />\r\n        <textarea className=\"form-text\" placeholder=\"Message\"></textarea>\r\n        <input type=\"submit\" className=\"form-button\" value=\"Send\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\n\r\nconst Background = () => {\r\n  return (\r\n    <div className=\"animated-bg\">\r\n      <ul className=\"boxes\">\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Background;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Projects from \"./components/Projects\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Background from \"./components/Background\";\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"nav\">\n        <Router>\n          <ul>\n            <li>\n              <Link to={process.env.PUBLIC_URL + \"/\"} className=\"nav-link\">\n                Home\n              </Link>\n            </li>\n            <li>\n              <Link\n                to={process.env.PUBLIC_URL + \"/projects\"}\n                className=\"nav-link\"\n              >\n                Projects\n              </Link>\n            </li>\n            <li>\n              <Link to={process.env.PUBLIC_URL + \"/about\"} className=\"nav-link\">\n                About\n              </Link>\n            </li>\n            <li>\n              <Link\n                to={process.env.PUBLIC_URL + \"/contact\"}\n                className=\"nav-link\"\n              >\n                Contact\n              </Link>\n            </li>\n          </ul>\n\n          <div className=\"content\">\n            <Switch>\n              <Route exact path={process.env.PUBLIC_URL + \"/\"}>\n                <Home />\n              </Route>\n              <Route exact path={process.env.PUBLIC_URL + \"/projects\"}>\n                <Projects />\n              </Route>\n              <Route path={process.env.PUBLIC_URL + \"/about\"}>\n                <About />\n              </Route>\n              <Route path={process.env.PUBLIC_URL + \"/contact\"}>\n                <Contact />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </div>\n      <Background />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}